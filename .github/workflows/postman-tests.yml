name: Run Newman Tests (Self-Hosted with Direct Access - Testnet)

on:
  repository_dispatch:
    types: [run-tests]

jobs:
  run-tests:
    runs-on: self-hosted 
    permissions:
      contents: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4.2.2
        with:
          persist-credentials: true

      - name: Update Last Processed Upstream Run ID
        run: |
          echo "Updating .last_upstream_run_id.txt with ${{ github.event.client_payload.run_id }}"
          echo "${{ github.event.client_payload.run_id }}" > .last_upstream_run_id.txt
          
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          
          echo "Checking git status before stash:"
          git status --short

          echo "Stashing local changes..."
          git stash push -u -m "workflow_stash_for_run_id_update" || echo "No changes to stash or stash failed."
          
          echo "Pulling with rebase..."
          git pull --rebase
          
          echo "Attempting to pop stash..."
          if git rev-parse -q --verify refs/stash >/dev/null; then
            git stash pop || (
              echo "Warning: 'git stash pop' failed. Re-applying .last_upstream_run_id.txt manually."
              echo "${{ github.event.client_payload.run_id }}" > .last_upstream_run_id.txt
              git add .last_upstream_run_id.txt 
              git stash drop || echo "No stash to drop or already dropped."
            )
          else
            echo "No stash found to pop. Ensuring .last_upstream_run_id.txt content."
            echo "${{ github.event.client_payload.run_id }}" > .last_upstream_run_id.txt
            git add .last_upstream_run_id.txt
          fi
          
          echo "Committing .last_upstream_run_id.txt..."
          git commit -m "[skip ci] Update last processed upstream run id to ${{ github.event.client_payload.run_id }}" || echo "No changes to commit for last run ID."
          
          echo "Pushing changes..."
          git push
          
      - name: Run Newman Tests for Testnet
        id: newman
        run: |
          echo "$(date): Starting Newman run..."
          newman run postman/collection.json \
            -e postman/environment.testnet.json \
            --reporters cli,junit \
            --reporter-junit-export results.xml
          NEWMAN_EXIT_CODE=$?
          echo "$(date): Newman command finished. Exit code: ${NEWMAN_EXIT_CODE}"
          echo "Setting GitHub output..."
          echo "exit_code=${NEWMAN_EXIT_CODE}" >> $GITHUB_OUTPUT
          echo "$(date): GitHub output set. Script finished."
        continue-on-error: true 

      - name: Upload Test Results (JUnit XML)
        if: always()
        uses: actions/upload-artifact@v4.6.0
        with:
          name: postman-test-results
          path: results.xml
          if-no-files-found: warn

      - name: Upload HTML Report (Nice UI)
        if: always()
        uses: actions/upload-artifact@v4.6.0
        with:
          name: postman-html-report
          path: newman-report.html
          if-no-files-found: warn

      - name: Notify Slack Channel and Handle Failure
        if: always()
        run: |
          NEWMAN_EXIT_CODE="${{ steps.newman.outputs.exit_code }}" 
          JOB_STATUS="${{ job.status }}" # GitHub Actions job status: success or failure

          FINAL_MESSAGE=""
          ICON=":test_tube:" # Default icon
          COLOR="warning"    # Default color
          # Updated title
          TITLE_TEXT="Newman Test Run (Testnet on Self-Hosted - No VPN)" 

          if [ "$JOB_STATUS" == "success" ]; then
            # Job succeeded, now check Newman's exit code
            if [ -z "$NEWMAN_EXIT_CODE" ] || [ "$NEWMAN_EXIT_CODE" -eq 0 ]; then
              FINAL_MESSAGE="All tests passed successfully!"
              ICON=":white_check_mark:"
              COLOR="good"
            else
              FINAL_MESSAGE="Newman tests completed but encountered failures (Exit Code: $NEWMAN_EXIT_CODE)."
              ICON=":warning:"
              COLOR="danger" # Test failures are considered a 'danger' for Slack notification
            fi
          else 
            # Job status is 'failure', meaning a step before or during Newman (but not Newman's own test failures) failed
            FINAL_MESSAGE="Workflow step failed. Check Actions run."
            ICON=":x:"
            COLOR="danger"
          fi
          
          TEXT_MESSAGE="$FINAL_MESSAGE Workflow: <${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|${{ github.workflow }} Run #${{ github.run_number }}>"

          PAYLOAD=$(jq -n \
            --arg channel "indexer-api-testing" \
            --arg username "GitHub Actions" \
            --arg icon_emoji "$ICON" \
            --arg color "$COLOR" \
            --arg title "$TITLE_TEXT" \
            --arg text "$TEXT_MESSAGE" \
            '{channel: $channel, username: $username, icon_emoji: $icon_emoji, attachments: [{color: $color, title: $title, text: $text}]}')
          
          echo "Sending payload to Slack:"
          echo "$PAYLOAD"
          curl -X POST -H "Content-type: application/json" --data "$PAYLOAD" "${{ secrets.SLACK_WEBHOOK_URL }}"

          # Final check to mark job as failed in GitHub Actions UI if necessary
          if [ "$JOB_STATUS" == "failure" ]; then
            echo "Job failed at a previous step."
            exit 1 # Ensure GitHub Actions marks the job as failed
          elif [ -n "$NEWMAN_EXIT_CODE" ] && [ "$NEWMAN_EXIT_CODE" -ne 0 ]; then
            echo "Newman tests failed. Marking job as failed."
            exit 1 # Ensure GitHub Actions marks the job as failed due to Newman test failures
          else
            echo "Job and tests (if applicable) successful."
          fi