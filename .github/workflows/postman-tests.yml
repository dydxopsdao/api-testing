name: Run Newman Tests with NordLayer VPN (Testnet)

on:
  repository_dispatch:
    types: [run-tests]

jobs:
  run-tests:
    runs-on: ubuntu-22.04 
    permissions:
      contents: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4.2.2
        with:
          persist-credentials: true

      - name: Update Last Processed Upstream Run ID
        run: |
          echo "${{ github.event.client_payload.run_id }}" > .last_upstream_run_id.txt
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git pull --rebase
          git add .last_upstream_run_id.txt
          git commit -m "[skip ci] Update last processed upstream run id to ${{ github.event.client_payload.run_id }}" || echo "No changes to commit."
          git push

      - name: Install Dependencies (Newman, NordLayer)
        run: |
          npm install -g newman newman-reporter-htmlextra

          echo "System Info:"
          lsb_release -a
          uname -m

          echo "Attempting to set up NordLayer repository..."
          sudo wget -qO /tmp/nordlayer-repo-setup.deb "https://downloads.nordlayer.com/linux/latest/nordlayer-latest_1.0.0_all.deb"
          sudo dpkg -i /tmp/nordlayer-repo-setup.deb
          
          if [ -f /etc/apt/sources.list.d/nordlayer.list ]; then
            echo "Contents of /etc/apt/sources.list.d/nordlayer.list:"
            cat /etc/apt/sources.list.d/nordlayer.list
          else
            echo "ERROR: /etc/apt/sources.list.d/nordlayer.list was NOT created by dpkg -i."
            exit 1
          fi
          sudo rm /tmp/nordlayer-repo-setup.deb

          echo "Updating package lists..."
          sudo apt-get update
          
          echo "Checking APT cache for nordlayer..."
          apt-cache policy nordlayer

          echo "Installing NordLayer package..."
          sudo apt-get install -f -y
          sudo apt-get install -y nordlayer

          echo "Reloading systemd daemon..."
          sudo systemctl daemon-reload
          
          echo "Attempting to stop NordLayer service (if running)..."
          sudo systemctl stop nordlayer.service || true

          echo "Attempting to enable and start NordLayer service..."
          if ! sudo systemctl enable --now nordlayer.service; then
            echo "ERROR: 'systemctl enable --now nordlayer.service' command failed."
            echo "--- Status of nordlayer.service ---"
            sudo systemctl status nordlayer.service --no-pager
            echo "--- Journal for nordlayer.service (last 100 lines) ---"
            sudo journalctl -xeu nordlayer.service --no-pager -n 100
            exit 1
          fi
          echo "Command 'systemctl enable --now nordlayer.service' completed."

          echo "Waiting for NordLayer service to become fully active..."
          timeout 60s bash -c 'until systemctl is-active --quiet nordlayer.service; do echo "Waiting for nordlayer.service (PID: $(systemctl show -p MainPID nordlayer.service | cut -d= -f2))..."; sleep 3; done'
          
          if ! systemctl is-active --quiet nordlayer.service; then
            echo "ERROR: NordLayer service did not become active after 'enable --now' and waiting."
            echo "--- Status of nordlayer.service (after timeout) ---"
            sudo systemctl status nordlayer.service --no-pager
            echo "--- Journal for nordlayer.service (last 100 lines, after timeout) ---"
            sudo journalctl -xeu nordlayer.service --no-pager -n 100
            exit 1
          fi
          echo "NordLayer service is active."
          
          echo "Setting permissions for NordLayer socket..."
          if [ -d "/run/nordlayer/" ]; then
              echo "Current permissions for /run/nordlayer/ directory:"
              sudo ls -ld /run/nordlayer/
              
              if [ -S "/run/nordlayer/nordlayer.sock" ]; then
                  echo "Found socket /run/nordlayer/nordlayer.sock. Changing ownership to runner and setting permissions."
                  sudo chown runner:runner /run/nordlayer/nordlayer.sock
                  sudo chmod 660 /run/nordlayer/nordlayer.sock
              else
                  echo "WARNING: /run/nordlayer/nordlayer.sock not found or not a socket. Checking directory contents..."
                  sudo ls -la /run/nordlayer/
              fi

              echo "Final permissions in /run/nordlayer/:"
              sudo ls -la /run/nordlayer/
              
              echo "Attempting to list /run/nordlayer/ as runner..."
              ls -la /run/nordlayer/
              
              if [ -S "/run/nordlayer/nordlayer.sock" ]; then
                  if [ -r "/run/nordlayer/nordlayer.sock" ] && [ -w "/run/nordlayer/nordlayer.sock" ]; then
                      echo "Socket /run/nordlayer/nordlayer.sock exists and is R/W accessible by the runner."
                  else
                      echo "ERROR: Socket /run/nordlayer/nordlayer.sock exists but is NOT R/W accessible by the runner."
                      exit 1
                  fi
              else
                  echo "ERROR: Socket /run/nordlayer/nordlayer.sock still not found after permission attempts."
                  exit 1 
              fi
          else
              echo "ERROR: /run/nordlayer/ directory not found after service start."
              exit 1
          fi
          sleep 2

      - name: Login to NordLayer VPN
        run: |
          nordlayer login --email "${{ secrets.NORDLAYER_EMAIL }}" --password "${{ secrets.NORDLAYER_PASSWORD }}" --organization "dydxopsdao"

      - name: Connect to NordLayer VPN
        run: |
          nordlayer gateways
          nordlayer connect "dos-server-BQG2cKQV"
          echo "Waiting for VPN connection to establish (20s)..."
          sleep 20
          echo "Verifying VPN IP..."
          curl --max-time 10 ifconfig.me || echo "Warning: Failed to get external IP via ifconfig.me"
          nordlayer status

      - name: Run Newman Tests for Testnet
        id: newman
        run: |
          newman run postman/collection.json \
            -e postman/environment.testnet.json \
            --reporters cli,htmlextra,junit \
            --reporter-htmlextra-export newman-report.html \
            --reporter-junit-export results.xml
          NEWMAN_EXIT_CODE=$?
          echo "Newman exit code: ${NEWMAN_EXIT_CODE}"
          echo "exit_code=${NEWMAN_EXIT_CODE}" >> $GITHUB_OUTPUT
        continue-on-error: true

      - name: Disconnect from NordLayer VPN
        if: always()
        run: |
          echo "Attempting to disconnect from NordLayer VPN..."
          nordlayer status || true
          nordlayer disconnect || echo "NordLayer already disconnected or failed to disconnect."

      - name: Upload Test Results (JUnit XML)
        if: always()
        uses: actions/upload-artifact@v4.6.0
        with:
          name: postman-test-results
          path: results.xml
          if-no-files-found: warn

      - name: Upload HTML Report (Nice UI)
        if: always()
        uses: actions/upload-artifact@v4.6.0
        with:
          name: postman-html-report
          path: newman-report.html
          if-no-files-found: warn

      - name: Notify Slack on Success
        if: success() && steps.newman.outputs.exit_code == 0
        run: |
          PAYLOAD=$(jq -n \
            --arg channel "indexer-api-testing" \
            --arg username "GitHub Actions" \
            --arg icon_emoji ":white_check_mark:" \
            --arg color "good" \
            --arg title "Newman Test Run Succeeded (Testnet)" \
            --arg text "All tests passed successfully! Workflow: <${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|${{ github.workflow }} Run #${{ github.run_number }}>" \
            '{channel: $channel, username: $username, icon_emoji: $icon_emoji, attachments: [{color: $color, title: $title, text: $text}]}')
          curl -X POST -H "Content-Type: application/json" --data "$PAYLOAD" "${{ secrets.SLACK_WEBHOOK_URL }}"

      - name: Notify Slack on Test Failure
        if: success() && steps.newman.outputs.exit_code != 0
        run: |
          PAYLOAD=$(jq -n \
            --arg channel "indexer-api-testing" \
            --arg username "GitHub Actions" \
            --arg icon_emoji ":warning:" \
            --arg color "warning" \
            --arg title "Newman Test Run Has Failures (Testnet)" \
            --arg text "Newman tests completed but encountered failures. Check reports. Workflow: <${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|${{ github.workflow }} Run #${{ github.run_number }}>" \
            '{channel: $channel, username: $username, icon_emoji: $icon_emoji, attachments: [{color: $color, title: $title, text: $text}]}')
          curl -X POST -H "Content-Type: application/json" --data "$PAYLOAD" "${{ secrets.SLACK_WEBHOOK_URL }}"
          exit 1

      - name: Notify Slack on Workflow Step Failure
        if: failure()
        run: |
          COLOR="danger"
          TITLE="GitHub Actions Workflow Failed (Testnet Newman Tests)"
          TEXT="One or more critical steps in the workflow failed. Check Actions run: <${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|${{ github.workflow }} Run #${{ github.run_number }}>"
          PAYLOAD=$(jq -n \
            --arg channel "indexer-api-testing" \
            --arg username "GitHub Actions" \
            --arg icon_emoji ":x:" \
            --arg color "$COLOR" \
            --arg title "$TITLE" \
            --arg text "$TEXT" \
            '{channel: $channel, username: $username, icon_emoji: $icon_emoji, attachments: [{color: $color, title: $title, text: $text}]}')
          curl -X POST -H "Content-Type: application/json" --data "$PAYLOAD" "${{ secrets.SLACK_WEBHOOK_URL }}"
