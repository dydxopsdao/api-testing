name: Run Newman Tests with NordLayer VPN (Testnet)

on:
  repository_dispatch:
    types: [run-tests]

jobs:
  run-tests:
    runs-on: ubuntu-22.04 # For NordLayer service stability
    permissions:
      contents: write # For git push
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4.2.2
        with:
          persist-credentials: true # Needed for git push

      - name: Update Last Processed Upstream Run ID
        run: |
          echo "Updating .last_upstream_run_id.txt with ${{ github.event.client_payload.run_id }}"
          echo "${{ github.event.client_payload.run_id }}" > .last_upstream_run_id.txt
          
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          
          echo "Checking git status before stash:"
          git status --short

          echo "Stashing local changes..."
          git stash push -u -m "workflow_stash_for_run_id_update" || echo "No changes to stash or stash failed."
          
          echo "Pulling with rebase..."
          git pull --rebase
          
          echo "Attempting to pop stash..."
          if git rev-parse -q --verify refs/stash >/dev/null; then
            git stash pop || (
              echo "Warning: 'git stash pop' failed. Re-applying .last_upstream_run_id.txt manually."
              echo "${{ github.event.client_payload.run_id }}" > .last_upstream_run_id.txt
              git stash drop || echo "No stash to drop or already dropped."
            )
          else
            echo "No stash found to pop. Ensuring .last_upstream_run_id.txt content."
            echo "${{ github.event.client_payload.run_id }}" > .last_upstream_run_id.txt
          fi
          
          echo "Adding and committing .last_upstream_run_id.txt..."
          git add .last_upstream_run_id.txt
          git commit -m "[skip ci] Update last processed upstream run id to ${{ github.event.client_payload.run_id }}" || echo "No changes to commit for last run ID."
          
          echo "Pushing changes..."
          git push

      - name: Install Dependencies (Newman, NordLayer)
        id: install_deps # ID for potential outputs (though not used currently)
        run: |
          npm install -g newman newman-reporter-htmlextra
          echo "System Info:"
          lsb_release -a
          uname -m

          echo "Attempting to install NordLayer directly from ./nordlayer/nordlayer_3.3.5_amd64.deb..."
          if [ -f "./nordlayer/nordlayer_3.3.5_amd64.deb" ]; then
            # Remove any existing nordlayer packages to ensure a clean install from the .deb
            sudo apt-get remove -y nordlayer nordlayer-latest nordlayer-tray || echo "No existing nordlayer packages to remove, or removal failed (which is ok)."
            sudo dpkg -i ./nordlayer/nordlayer_3.3.5_amd64.deb
            echo "Resolving dependencies for the directly installed NordLayer package..."
            sudo apt-get update -y 
            sudo apt-get install -f -y # This will install any missing dependencies
          else
            echo "ERROR: Application package ./nordlayer/nordlayer_3.3.5_amd64.deb not found!"
            exit 1
          fi

          echo "Reloading systemd daemon..."
          sudo systemctl daemon-reload
          echo "Attempting to stop NordLayer service (if running)..."
          sudo systemctl stop nordlayer.service || true
          echo "Resetting any failed state for nordlayer.service..."
          sudo systemctl reset-failed nordlayer.service || true 

          echo "Attempting to start NordLayer service..."
          if ! sudo systemctl start nordlayer.service; then
            echo "ERROR: Initial 'systemctl start nordlayer.service' command failed."
            sudo systemctl status nordlayer.service --no-pager
            sudo journalctl -xeu nordlayer.service --no-pager -n 100
            exit 1
          fi
          echo "Initial 'systemctl start nordlayer.service' command completed."

          echo "Checking NordLayer service stability (approx 15-20s)..."
          STABLE_SECONDS_REQUIRED=10 
          CHECK_INTERVAL=5
          MAX_TOTAL_WAIT_SECONDS=30
          ELAPSED_WAIT_SECONDS=0
          SERVICE_CONFIRMED_STABLE=false
          sleep 2 # Give service a moment to settle after 'start' before first check

          while [ $ELAPSED_WAIT_SECONDS -lt $MAX_TOTAL_WAIT_SECONDS ]; do
            if ! systemctl is-active --quiet nordlayer.service; then
              echo "Service is NOT active. Failing stability check."
              SERVICE_CONFIRMED_STABLE=false
              break
            fi
            CURRENT_NRESTARTS=$(systemctl show nordlayer.service --property=NRestarts --value)
            echo "Service active. Current NRestarts: $CURRENT_NRESTARTS"
            
            # After 'reset-failed' and 'start', NRestarts for a stable service should ideally be 0.
            # We allow 1 to account for a potential single, quick, self-correcting restart.
            if [ "$CURRENT_NRESTARTS" -gt 1 ]; then 
                 echo "Service has NRestarts=$CURRENT_NRESTARTS. This indicates instability after our start attempt."
                 SERVICE_CONFIRMED_STABLE=false
                 break 
            fi
            
            if [ $ELAPSED_WAIT_SECONDS -ge $STABLE_SECONDS_REQUIRED ]; then
                echo "Service has been active with NRestarts=$CURRENT_NRESTARTS for $ELAPSED_WAIT_SECONDS seconds."
                SERVICE_CONFIRMED_STABLE=true
                break
            fi
            
            sleep $CHECK_INTERVAL
            ELAPSED_WAIT_SECONDS=$((ELAPSED_WAIT_SECONDS + CHECK_INTERVAL))
          done
          
          if [ "$SERVICE_CONFIRMED_STABLE" = false ]; then
            echo "ERROR: NordLayer service did not achieve stable active state."
            sudo systemctl status nordlayer.service --no-pager
            sudo journalctl -xeu nordlayer.service --no-pager -n 200 
            echo "--- Checking config file /etc/nordlayer/config.hcl ---"
            sudo ls -l /etc/nordlayer/config.hcl || echo "/etc/nordlayer/config.hcl not found."
            if sudo test -f /etc/nordlayer/config.hcl; then sudo cat /etc/nordlayer/config.hcl || echo "Could not cat config file."; fi
            echo "--- Checking for NordLayer's own logs in /var/log/ ---"
            sudo ls -la /var/log/nordlayer/ || echo "/var/log/nordlayer/ not found."
            if sudo test -d /var/log/nordlayer; then sudo find /var/log/nordlayer/ -type f -exec echo "--- Contents of {} ---" \; -exec sudo cat {} \; ; fi
            sudo grep -i 'nordlayer' /var/log/syslog || echo "No 'nordlayer' entries in syslog."
            exit 1
          fi
          echo "NordLayer service confirmed STABLE and ACTIVE."
          
          SOCKET_PATH="/run/nordlayer/nordlayer.sock"
          echo "Checking for socket $SOCKET_PATH..."
          sleep 1 
          if sudo test -S "$SOCKET_PATH"; then
            echo "SUCCESS: Socket $SOCKET_PATH found and is a socket."
            echo "Setting permissions on existing socket $SOCKET_PATH to 666..."
            sudo chmod 666 "$SOCKET_PATH"
            echo "Permissions on socket after chmod 666:"
            sudo ls -l "$SOCKET_PATH"
          else
            echo "CRITICAL ERROR: Socket $SOCKET_PATH does NOT exist or is not a socket, even though service is STABLE."
            sudo ls -la /run/nordlayer/ 
            sudo systemctl status nordlayer.service --no-pager
            sudo journalctl -xeu nordlayer.service --no-pager -n 100
            exit 1
          fi
          
          echo "End of Install Dependencies step. Pausing for 2s before login attempt..."
          sleep 2

      - name: Login to NordLayer VPN
        run: |
          SOCKET_PATH="/run/nordlayer/nordlayer.sock"
          echo "Login Step: Current user: $(whoami), Groups: $(groups)"
          echo "Login Step: Verifying socket $SOCKET_PATH existence..."
          
          if ! sudo test -S "$SOCKET_PATH"; then # Use sudo test -S for accuracy
            echo "CRITICAL ERROR (Login Step): Socket $SOCKET_PATH is MISSING or not a socket!"
            sudo ls -la /run/nordlayer/
            sudo systemctl status nordlayer.service --no-pager
            sudo journalctl -xeu nordlayer.service --no-pager -n 100
            exit 1
          else
            echo "Login Step: Socket $SOCKET_PATH FOUND. Permissions:"
            sudo ls -l "$SOCKET_PATH"
          fi

          if ! nordlayer login --email "${{ secrets.NORDLAYER_EMAIL }}" --password "${{ secrets.NORDLAYER_PASSWORD }}" --organization "dydxopsdao"; then
            echo "ERROR: nordlayer login command failed."
            sudo journalctl -xeu nordlayer.service --no-pager -n 100 
            echo "--- Checking for /var/log/nordlayer/ AT LOGIN FAILURE ---"
            sudo ls -la /var/log/nordlayer/ || echo "/var/log/nordlayer/ not found or no permission."
            if sudo test -d /var/log/nordlayer; then sudo find /var/log/nordlayer/ -type f -exec echo "--- Contents of {} ---" \; -exec sudo cat {} \; ; fi
            exit 1
          fi
          echo "NordLayer login successful."

      - name: Connect to NordLayer VPN
        run: |
          nordlayer gateways
          nordlayer connect "dos-server-BQG2cKQV"
          sleep 20 
          echo "Verifying VPN IP..."
          curl --max-time 10 ifconfig.me || echo "Warning: Could not verify external IP."

      - name: Run Newman Tests for Testnet
        id: newman
        run: |
          newman run postman/collection.json \
            -e postman/environment.testnet.json \
            --reporters cli,htmlextra,junit \
            --reporter-htmlextra-export newman-report.html \
            --reporter-junit-export results.xml
          NEWMAN_EXIT_CODE=$?
          echo "Newman exit code: ${NEWMAN_EXIT_CODE}"
          echo "exit_code=${NEWMAN_EXIT_CODE}" >> $GITHUB_OUTPUT
        continue-on-error: true

      - name: Disconnect from NordLayer VPN
        if: always()
        run: |
          echo "Attempting to disconnect from NordLayer VPN..."
          nordlayer status || true
          nordlayer disconnect || echo "NordLayer already disconnected or failed to disconnect."

      - name: Upload Test Results (JUnit XML)
        if: always()
        uses: actions/upload-artifact@v4.6.0
        with:
          name: postman-test-results
          path: results.xml
          if-no-files-found: warn

      - name: Upload HTML Report (Nice UI)
        if: always()
        uses: actions/upload-artifact@v4.6.0
        with:
          name: postman-html-report
          path: newman-report.html
          if-no-files-found: warn

      - name: Notify Slack Channel and Handle Failure
        if: always()
        run: |
          NEWMAN_EXIT_CODE="${{ steps.newman.outputs.exit_code }}" 
          JOB_STATUS="${{ job.status }}"
          FINAL_MESSAGE=""
          ICON=":test_tube:" 
          COLOR="warning" 
          TITLE_TEXT="NordLayer & Newman Test Run (Testnet on ubuntu-22.04)"

          if [ "$JOB_STATUS" == "success" ]; then
            if [ -z "$NEWMAN_EXIT_CODE" ] || [ "$NEWMAN_EXIT_CODE" -eq 0 ]; then
              FINAL_MESSAGE="All tests passed successfully!"
              ICON=":white_check_mark:"
              COLOR="good"
            else
              FINAL_MESSAGE="Newman tests completed but encountered failures (Exit Code: $NEWMAN_EXIT_CODE)."
              ICON=":warning:"
              COLOR="danger" 
            fi
          else 
            FINAL_MESSAGE="Workflow step failed prior to or during Newman tests. Check Actions run."
            ICON=":x:"
            COLOR="danger"
          fi
          
          TEXT_MESSAGE="$FINAL_MESSAGE Workflow: <${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|${{ github.workflow }} Run #${{ github.run_number }}>"
          PAYLOAD=$(jq -n \
            --arg channel "indexer-api-testing" \
            --arg username "GitHub Actions" \
            --arg icon_emoji "$ICON" \
            --arg color "$COLOR" \
            --arg title "$TITLE_TEXT" \
            --arg text "$TEXT_MESSAGE" \
            '{channel: $channel, username: $username, icon_emoji: $icon_emoji, attachments: [{color: $color, title: $title, text: $text}]}')
          
          echo "$PAYLOAD"
          curl -X POST -H "Content-type: application/json" --data "$PAYLOAD" "${{ secrets.SLACK_WEBHOOK_URL }}"

          # Final check to mark job as failed if necessary
          if [ "$JOB_STATUS" == "failure" ]; then
            echo "Job failed at a previous step."
            exit 1
          elif [ -n "$NEWMAN_EXIT_CODE" ] && [ "$NEWMAN_EXIT_CODE" -ne 0 ]; then
            echo "Newman tests failed. Marking job as failed."
            exit 1
          else
            echo "Job and tests (if applicable) successful."
          fi