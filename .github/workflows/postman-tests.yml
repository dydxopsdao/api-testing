name: Newman Tests with NordLayer VPN (Testnet)

on:
  workflow_dispatch:
    inputs:
      override-commit-check:
        description: "Run the tests regardless of upstream workflow status"
        required: false
        default: "false"
  schedule:
    - cron: "*/15 * * * *"

jobs:
  # Check the status of the upstream testnet workflow
  check-upstream:
    runs-on: ubuntu-latest
    outputs:
      upstream-success: ${{ steps.check.outputs.upstream-success }}
    steps:
      - name: Check upstream workflow run status
        id: check
        uses: actions/github-script@v6
        with:
          script: |
            const owner = "dydxprotocol";
            const repo = "v4-chain";
            // The upstream workflow file for testnet deployments.
            const workflowFile = "indexer-build-and-push-testnet.yml";
            
            // Get the most recent completed run of the upstream workflow.
            const { data: runs } = await github.rest.actions.listWorkflowRuns({
              owner,
              repo,
              workflow_id: workflowFile,
              status: "completed",
              per_page: 1
            });
            
            if (runs.total_count > 0) {
              const latestRun = runs.workflow_runs[0];
              if (latestRun.conclusion === "success") {
                core.setOutput("upstream-success", "true");
                console.log("Latest upstream workflow run was successful.");
              } else {
                core.setOutput("upstream-success", "false");
                console.log("Latest upstream workflow run did not succeed.");
              }
            } else {
              core.setOutput("upstream-success", "false");
              console.log("No upstream workflow run found.");
            }
          result-encoding: string

  # Main job: run Newman tests if upstream succeeded or if manually overridden.
  run-postman-tests:
    needs: check-upstream
    if: github.event.inputs.override-commit-check == 'true' || needs.check-upstream.outputs.upstream-success == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Check out this repo
        uses: actions/checkout@v4.2.2

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      # --------------------------------
      # 1. Install Newman
      # --------------------------------
      - name: Install Newman (Postman CLI)
        run: npm install -g newman

      # --------------------------------
      # 2. Install & Configure NordLayer
      # --------------------------------
      - name: Install NordLayer CLI
        run: |
          sudo apt-get update
          sudo dpkg -i ./nordlayer/nordlayer-latest_1.0.0_all.deb
          sudo apt-get install -f -y
          sudo apt-get update
          sudo apt-get install -y nordlayer
          
          # Restart the NordLayer service
          sudo systemctl daemon-reload
          sudo systemctl restart nordlayer.service
          sleep 2
          
          # Fix socket permissions
          sudo chown -R runner:runner /run/nordlayer/
          sudo chmod 755 /run/nordlayer
          sudo chmod 666 /run/nordlayer/nordlayer.sock

      - name: Authenticate with NordLayer
        run: |
          nordlayer login \
            --email "${{ secrets.NORDLAYER_EMAIL }}" \
            --password "${{ secrets.NORDLAYER_PASSWORD }}" \
            --organization "dydxopsdao"

      - name: Connect to NordLayer Server
        run: |
          nordlayer gateways
          nordlayer connect "dos-server-BQG2cKQV"

      - name: Verify VPN Connection
        run: |
          echo "Verifying VPN IP..."
          curl ifconfig.me

      # --------------------------------
      # 3. Run Newman Tests for Testnet
      # --------------------------------
      - name: Run Postman Tests
        run: |
          npm install -g newman newman-reporter-htmlextra
          newman run postman/collection.json \
            -e postman/environment.testnet.json \
            --reporters cli,htmlextra,junit \
            --reporter-htmlextra-export newman-report.html \
            --reporter-junit-export results.xml

      # --------------------------------
      # 4. Disconnect from NordLayer
      # --------------------------------
      - name: Debug NordLayer Status
        if: always()
        run: nordlayer status

      - name: Disconnect from NordLayer
        if: always()
        run: nordlayer disconnect || echo "Already disconnected"

      # --------------------------------
      # 5. Upload Test Results
      # --------------------------------    
      - name: Upload Test Results (JUnit XML)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: postman-test-results
          path: results.xml

      - name: Upload HTML Report (Nice UI)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: postman-html-report
          path: newman-report.html

      # --------------------------------
      # 6. Post Results to Slack
      # --------------------------------    
      - name: Notify Slack Channel
        if: always()
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          JOB_STATUS: ${{ job.status }}
        run: |
          # Determine the color based on job status.
          if [ "$JOB_STATUS" = "success" ]; then
            COLOR="good"
          else
            COLOR="danger"
          fi
          # Build the JSON payload using jq.
          PAYLOAD=$(jq -n \
            --arg channel "indexer-api-testing" \
            --arg username "github-actions" \
            --arg icon_emoji ":rocket:" \
            --arg color "$COLOR" \
            --arg title "Newman Test Run Result" \
            --arg text "The Newman tests on testnet have completed with status: $JOB_STATUS." \
            '{channel: $channel, username: $username, icon_emoji: $icon_emoji, attachments: [{color: $color, title: $title, text: $text}]}')
          echo "Sending payload to Slack:"
          echo "$PAYLOAD"
          curl -X POST -H "Content-type: application/json" --data "$PAYLOAD" "$SLACK_WEBHOOK_URL"
