name: Run Newman Tests (Self-Hosted with Direct Access - Testnet)

on:
  repository_dispatch:
    types: [run-tests]

jobs:
  run-tests:
    runs-on: self-hosted 
    permissions:
      contents: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4.2.2
        with:
          persist-credentials: true

      - name: Update Last Processed Upstream Run ID
        run: |
          echo "Updating .last_upstream_run_id.txt with ${{ github.event.client_payload.run_id }}"
          echo "${{ github.event.client_payload.run_id }}" > .last_upstream_run_id.txt
          
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          
          echo "Checking git status before stash:"
          git status --short

          echo "Stashing local changes..."
          git stash push -u -m "workflow_stash_for_run_id_update" || echo "No changes to stash or stash failed."
          
          echo "Pulling with rebase..."
          git pull --rebase
          
          echo "Attempting to pop stash..."
          if git rev-parse -q --verify refs/stash >/dev/null; then
            git stash pop || (
              echo "Warning: 'git stash pop' failed. Re-applying .last_upstream_run_id.txt manually."
              echo "${{ github.event.client_payload.run_id }}" > .last_upstream_run_id.txt
              git add .last_upstream_run_id.txt 
              git stash drop || echo "No stash to drop or already dropped."
            )
          else
            echo "No stash found to pop. Ensuring .last_upstream_run_id.txt content."
            echo "${{ github.event.client_payload.run_id }}" > .last_upstream_run_id.txt
            git add .last_upstream_run_id.txt
          fi
          
          echo "Committing .last_upstream_run_id.txt..."
          git commit -m "[skip ci] Update last processed upstream run id to ${{ github.event.client_payload.run_id }}" || echo "No changes to commit for last run ID."
          
          echo "Pushing changes..."
          git push
          
      - name: Run Newman Tests (Ultra-Simple Execution)
        id: newman # ID for conclusion checking
        run: |
          # The only command in this block is newman.
          # The script will exit with Newman's exit code.
          newman run postman/collection.json \
            -e postman/environment.testnet.json \
            --reporters cli
        # No NEWMAN_EXIT_CODE=$?
        # No echo "exit_code=..." >> $GITHUB_OUTPUT
        # No other echos after newman
        continue-on-error: true # We need this so the Slack step can run and interpret the result

      - name: Upload Test Results (JUnit XML)
        if: always()
        uses: actions/upload-artifact@v4.6.0
        with:
          name: postman-test-results
          path: results.xml
          if-no-files-found: warn

      - name: Upload HTML Report (Nice UI)
        if: always()
        uses: actions/upload-artifact@v4.6.0
        with:
          name: postman-html-report
          path: newman-report.html
          if-no-files-found: warn

      - name: Notify Slack Channel and Handle Failure
        if: always() # This ensures it runs
        run: |
          # NEWMAN_EXIT_CODE comes from steps.newman.outputs.exit_code
          # If the Newman step itself fails (like with a script error), 
          # steps.newman.outputs.exit_code might not be set or might be empty.
          # We should also check the step's own conclusion.
          
          NEWMAN_STEP_CONCLUSION="${{ steps.newman.conclusion }}" # success, failure, skipped, etc.
          NEWMAN_TEST_EXIT_CODE="${{ steps.newman.outputs.exit_code }}" # Newman's internal exit code

          JOB_OVERALL_STATUS="${{ job.status }}" # Overall job status so far

          FINAL_MESSAGE=""
          ICON=":test_tube:" 
          COLOR="warning" 
          TITLE_TEXT="Newman Test Run (Testnet on Self-Hosted - No VPN)"
          WILL_FAIL_JOB=false

          if [ "$NEWMAN_STEP_CONCLUSION" == "failure" ]; then
            FINAL_MESSAGE="Newman step failed to execute correctly (e.g., script error)."
            ICON=":x:"
            COLOR="danger"
            WILL_FAIL_JOB=true
          elif [ "$NEWMAN_STEP_CONCLUSION" == "success" ]; then
            if [ -z "$NEWMAN_TEST_EXIT_CODE" ] || [ "$NEWMAN_TEST_EXIT_CODE" -eq 0 ]; then
              FINAL_MESSAGE="All Newman tests passed successfully!"
              ICON=":white_check_mark:"
              COLOR="good"
            else
              FINAL_MESSAGE="Newman tests completed but encountered test failures (Newman Exit Code: $NEWMAN_TEST_EXIT_CODE)."
              ICON=":warning:"
              COLOR="danger" 
              WILL_FAIL_JOB=true
            fi
          else # Skipped or cancelled
            FINAL_MESSAGE="Newman step was $NEWMAN_STEP_CONCLUSION."
            ICON=":zzz:"
            COLOR="neutral"
            # If prior steps caused the job to fail, we still want the job to be red
            if [ "$JOB_OVERALL_STATUS" == "failure" ]; then
                WILL_FAIL_JOB=true
            fi
          fi
          
          # Append overall job status if it already failed before this notification step
          if [ "$JOB_OVERALL_STATUS" == "failure" ] && [ "$NEWMAN_STEP_CONCLUSION" != "failure" ]; then
             FINAL_MESSAGE="A previous step in the job failed. $FINAL_MESSAGE"
             ICON=":x:"
             COLOR="danger"
             WILL_FAIL_JOB=true # Ensure job stays failed
          fi

          TEXT_MESSAGE="$FINAL_MESSAGE Workflow: <${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|${{ github.workflow }} Run #${{ github.run_number }}>"
          PAYLOAD=$(jq -n \
            --arg channel "indexer-api-testing" \
            --arg username "GitHub Actions" \
            --arg icon_emoji "$ICON" \
            --arg color "$COLOR" \
            --arg title "$TITLE_TEXT" \
            --arg text "$TEXT_MESSAGE" \
            '{channel: $channel, username: $username, icon_emoji: $icon_emoji, attachments: [{color: $color, title: $title, text: $text}]}')
          
          echo "$PAYLOAD"
          curl -X POST -H "Content-type: application/json" --data "$PAYLOAD" "${{ secrets.SLACK_WEBHOOK_URL }}"

          if [ "$WILL_FAIL_JOB" = true ]; then
            echo "Marking job as failed based on Newman step conclusion or test exit code."
            exit 1
          else
            echo "Job successful."
          fi