name: Run Newman Tests with NordLayer VPN (Testnet)

on:
  repository_dispatch:
    types: [run-tests]

jobs:
  run-tests:
    runs-on: ubuntu-22.04 # Switched to 22.04 for service stability
    permissions:
      contents: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4.2.2
        with:
          persist-credentials: true

      - name: Update Last Processed Upstream Run ID
        run: |
          echo "${{ github.event.client_payload.run_id }}" > .last_upstream_run_id.txt
          # rm -f last_run_id.txt # Uncomment if this file should be removed
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git pull --rebase
          git add .last_upstream_run_id.txt
          git commit -m "[skip ci] Update last processed upstream run id to ${{ github.event.client_payload.run_id }}" || echo "No changes to commit."
          git push

      - name: Install Dependencies (Newman, NordLayer, Datadog CLI)
        run: |
          npm install -g newman newman-reporter-htmlextra @datadog/datadog-ci

          echo "System Info:"
          lsb_release -a
          uname -m

          echo "Setting up NordLayer repository using local ./nordlayer/nordlayer-latest_1.0.0_all.deb..."
          # This relies on the .deb file being present in your repository at the specified path.
          if [ -f "./nordlayer/nordlayer-latest_1.0.0_all.deb" ]; then
            sudo dpkg -i ./nordlayer/nordlayer-latest_1.0.0_all.deb
          else
            echo "ERROR: Local repository setup file ./nordlayer/nordlayer-latest_1.0.0_all.deb not found!"
            echo "Please ensure this file is present in the 'nordlayer' directory of your repository."
            exit 1
          fi
          
          sudo apt-get update -y # Update after repo setup
          sudo apt-get install -f -y # Fix dependencies if any from dpkg
          
          echo "Installing NordLayer package..."
          # This should now install nordlayer from the repository configured by the .deb
          sudo apt-get install -y nordlayer 

          echo "Reloading systemd daemon..."
          sudo systemctl daemon-reload
          
          echo "Attempting to stop NordLayer service (if running)..."
          sudo systemctl stop nordlayer.service || true

          echo "Attempting to enable and start NordLayer service..."
          if ! sudo systemctl enable --now nordlayer.service; then
            echo "ERROR: 'systemctl enable --now nordlayer.service' command failed."
            echo "--- Status of nordlayer.service ---"
            sudo systemctl status nordlayer.service --no-pager
            echo "--- Journal for nordlayer.service (last 100 lines) ---"
            sudo journalctl -xeu nordlayer.service --no-pager -n 100
            exit 1
          fi
          echo "Command 'systemctl enable --now nordlayer.service' completed."

          echo "Waiting for NordLayer service to become fully active..."
          # Wait up to 60 seconds for the service to be active
          timeout 60s bash -c 'until systemctl is-active --quiet nordlayer.service; do echo "Waiting for nordlayer.service..."; sleep 3; done'
          
          if ! systemctl is-active --quiet nordlayer.service; then
            echo "ERROR: NordLayer service did not become active."
            sudo systemctl status nordlayer.service --no-pager
            sudo journalctl -xeu nordlayer.service --no-pager -n 100 # Logs if timeout
            exit 1
          fi
          echo "NordLayer service is active."
          
          echo "Setting permissions for /run/nordlayer/ (Your Original Method)..."
          sleep 3 # Give service a moment to create socket/directory fully
          if [ -d "/run/nordlayer" ]; then
            sudo chown -R $(whoami):$(whoami) /run/nordlayer/
            sudo chmod 755 /run/nordlayer
            if [ -S "/run/nordlayer/nordlayer.sock" ]; then
              sudo chmod 666 /run/nordlayer/nordlayer.sock
              echo "Permissions set on /run/nordlayer/ and nordlayer.sock."
              echo "Verifying socket permissions:"
              ls -la /run/nordlayer/
            else
              echo "ERROR: /run/nordlayer/nordlayer.sock not found after service start and sleep!"
              ls -la /run/nordlayer/
              exit 1
            fi
          else
            echo "ERROR: /run/nordlayer directory not found after service start and sleep!"
            exit 1
          fi
          echo "Giving NordLayer service extra time to settle (10s)..." # <<< INCREASED SLEEP
          sleep 10

      - name: Login to NordLayer VPN
        run: |
          echo "Current user for NordLayer CLI: $(whoami)"
          echo "Groups for current user: $(groups)"
          nordlayer login --email "${{ secrets.NORDLAYER_EMAIL }}" --password "${{ secrets.NORDLAYER_PASSWORD }}" --organization "dydxopsdao"

      - name: Connect to NordLayer VPN
        run: |
          nordlayer gateways
          nordlayer connect "dos-server-BQG2cKQV"
          sleep 20 # Allow time for connection
          echo "Verifying VPN IP..."
          curl --max-time 10 ifconfig.me || echo "Warning: Could not verify external IP."

      - name: Run Newman Tests for Testnet
        id: newman
        run: |
          newman run postman/collection.json \
            -e postman/environment.testnet.json \
            --reporters cli,htmlextra,junit \
            --reporter-htmlextra-export newman-report.html \
            --reporter-junit-export results.xml
          NEWMAN_EXIT_CODE=$?
          echo "exit_code=${NEWMAN_EXIT_CODE}" >> $GITHUB_OUTPUT
        continue-on-error: true # Allow subsequent steps to run for reporting

      - name: Disconnect from NordLayer VPN
        if: always() # Ensure disconnect happens
        run: |
          nordlayer status || true
          nordlayer disconnect || echo "Already disconnected or failed to disconnect."

      - name: Upload Test Results (JUnit XML)
        if: always()
        uses: actions/upload-artifact@v4.6.0
        with:
          name: postman-test-results
          path: results.xml
          if-no-files-found: warn # Don't fail if file is missing

      - name: Upload HTML Report (Nice UI)
        if: always()
        uses: actions/upload-artifact@v4.6.0
        with:
          name: postman-html-report
          path: newman-report.html
          if-no-files-found: warn

      - name: Notify Slack Channel and Handle Failure
        if: always()
        run: |
          NEWMAN_EXIT_CODE="${{ steps.newman.outputs.exit_code }}" 
          JOB_STATUS="${{ job.status }}"

          FINAL_MESSAGE=""
          ICON=":test_tube:" # Default icon
          COLOR="warning" # Default color
          TITLE_TEXT="NordLayer & Newman Test Run (Testnet on ubuntu-22.04)"

          if [ "$JOB_STATUS" == "success" ]; then
            if [ -z "$NEWMAN_EXIT_CODE" ] || [ "$NEWMAN_EXIT_CODE" -eq 0 ]; then
              FINAL_MESSAGE="All tests passed successfully!"
              ICON=":white_check_mark:"
              COLOR="good"
            else
              FINAL_MESSAGE="Newman tests completed but encountered failures (Exit Code: $NEWMAN_EXIT_CODE)."
              ICON=":warning:"
              COLOR="danger" 
            fi
          else 
            FINAL_MESSAGE="Workflow step failed prior to or during Newman tests. Check Actions run."
            ICON=":x:"
            COLOR="danger"
          fi
          
          TEXT_MESSAGE="$FINAL_MESSAGE Workflow: <${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|${{ github.workflow }} Run #${{ github.run_number }}>"

          PAYLOAD=$(jq -n \
            --arg channel "indexer-api-testing" \
            --arg username "GitHub Actions" \
            --arg icon_emoji "$ICON" \
            --arg color "$COLOR" \
            --arg title "$TITLE_TEXT" \
            --arg text "$TEXT_MESSAGE" \
            '{channel: $channel, username: $username, icon_emoji: $icon_emoji, attachments: [{color: $color, title: $title, text: $text}]}')
          
          echo "Sending payload to Slack:"
          echo "$PAYLOAD"
          curl -X POST -H "Content-type: application/json" --data "$PAYLOAD" "${{ secrets.SLACK_WEBHOOK_URL }}"

          # Determine overall workflow success/failure for GitHub Actions UI
          if [ "$JOB_STATUS" == "failure" ]; then
            echo "Workflow job failed."
            exit 1
          elif [ -n "$NEWMAN_EXIT_CODE" ] && [ "$NEWMAN_EXIT_CODE" -ne 0 ]; then
            echo "Newman tests failed with exit code $NEWMAN_EXIT_CODE. Marking job as failed."
            exit 1
          else
            echo "Workflow and tests (if run) were successful."
          fi
