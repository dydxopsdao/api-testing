name: Run Newman Tests with NordLayer VPN (Testnet)

on:
  repository_dispatch:
    types: [run-tests]

jobs:
  run-tests:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4.2.2
        with:
          persist-credentials: true

      - name: Update Last Processed Upstream Run ID
        run: |
          echo "${{ github.event.client_payload.run_id }}" > .last_upstream_run_id.txt
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git pull --rebase
          git add .last_upstream_run_id.txt
          git commit -m "[skip ci] Update last processed upstream run id to ${{ github.event.client_payload.run_id }}" || echo "No changes to commit."
          git push

      - name: Install Dependencies (Newman, NordLayer, Datadog CLI)
        run: |
          # Install Newman
          npm install -g newman newman-reporter-htmlextra

          # Install NordLayer
          echo "System Info:"
          lsb_release -a
          uname -m

          echo "Attempting to set up NordLayer repository..."
          # Download NordLayer's repository setup package
          sudo wget -qO /tmp/nordlayer-repo-setup.deb "https://downloads.nordlayer.com/linux/latest/nordlayer-latest_1.0.0_all.deb"
          
          # Install the repository setup package
          # This package configures /etc/apt/sources.list.d/nordlayer.list
          sudo dpkg -i /tmp/nordlayer-repo-setup.deb
          
          echo "Checking if NordLayer APT source list was created:"
          ls -l /etc/apt/sources.list.d/
          if [ -f /etc/apt/sources.list.d/nordlayer.list ]; then
            echo "Contents of /etc/apt/sources.list.d/nordlayer.list:"
            cat /etc/apt/sources.list.d/nordlayer.list
          else
            echo "ERROR: /etc/apt/sources.list.d/nordlayer.list was NOT created by dpkg -i."
            # This would explain 'Unable to locate package'
          fi
          sudo rm /tmp/nordlayer-repo-setup.deb # Clean up downloaded .deb

          echo "Updating package lists after adding NordLayer repository..."
          sudo apt-get update
          
          echo "Checking APT cache for nordlayer package availability:"
          apt-cache policy nordlayer
          # This will show if 'nordlayer' is found and from which repo.

          echo "Installing NordLayer package..."
          # Use apt-get install -f -y first to resolve any dependencies from the dpkg step, though nordlayer-repo-setup.deb usually has none.
          sudo apt-get install -f -y
          sudo apt-get install -y nordlayer # This should now find the package

          echo "NordLayer package installation command finished. Checking version..."
          nordlayer --version || echo "Failed to get NordLayer version, package might not have installed correctly."

          echo "Reloading systemd daemon and attempting to start NordLayer service..."
          sudo systemctl daemon-reload
          sudo systemctl stop nordlayer.service || true # Ensure it's stopped if it was somehow running
          sudo systemctl enable --now nordlayer.service # Enable and start

          echo "Waiting for NordLayer service to become active..."
          timeout 60s bash -c 'until systemctl is-active --quiet nordlayer.service; do echo "Waiting for nordlayer.service (PID: $(systemctl show -p MainPID nordlayer.service | cut -d= -f2))..."; sleep 3; done'
          
          if ! systemctl is-active --quiet nordlayer.service; then
            echo "ERROR: NordLayer service failed to start."
            sudo systemctl status nordlayer.service --no-pager
            echo "--- Journal for nordlayer.service ---"
            sudo journalctl -xeu nordlayer.service --no-pager -n 100 # Last 100 lines
            exit 1
          fi
          echo "NordLayer service is active."
          
          echo "Setting permissions for NordLayer socket..."
          if [ -d "/run/nordlayer/" ]; then
              # Ensure the runner user can access the socket.
              # The exact ownership/group might vary, but giving runner access is key.
              # sudo chown runner:runner /run/nordlayer/nordlayer.sock
              sudo chmod 666 /run/nordlayer/nordlayer.sock
              ls -la /run/nordlayer/ # Verify permissions
              echo "Permissions set for /run/nordlayer/nordlayer.sock"
          else
              echo "WARNING: /run/nordlayer/ directory not found after service start."
              echo "This means the NordLayer client cannot be controlled."
              if systemctl is-active --quiet nordlayer.service; then
                 echo "ERROR: Nordlayer service is active, but /run/nordlayer/ or its socket is missing."
                 exit 1
              fi
          fi
          sleep 5 # Short pause for socket to be fully ready / permissions to apply

      - name: Login to NordLayer VPN
        run: |
          nordlayer login --email "${{ secrets.NORDLAYER_EMAIL }}" --password "${{ secrets.NORDLAYER_PASSWORD }}" --organization "dydxopsdao"

      - name: Connect to NordLayer VPN
        run: |
          nordlayer gateways
          nordlayer connect "dos-server-BQG2cKQV"
          echo "Waiting for VPN connection to establish..."
          sleep 20
          echo "Verifying VPN IP..."
          curl --max-time 10 ifconfig.me || echo "Failed to get external IP via ifconfig.me"
          nordlayer status

      - name: Run Newman Tests for Testnet
        id: newman
        run: |
          newman run postman/collection.json \
            -e postman/environment.testnet.json \
            --reporters cli,htmlextra,junit \
            --reporter-htmlextra-export newman-report.html \
            --reporter-junit-export results.xml
          NEWMAN_EXIT_CODE=$?
          echo "exit_code=${NEWMAN_EXIT_CODE}" >> $GITHUB_OUTPUT
        continue-on-error: true

      - name: Disconnect from NordLayer VPN
        if: always()
        run: |
          nordlayer status || true
          nordlayer disconnect || echo "Already disconnected or failed to disconnect."

      - name: Upload Test Results (JUnit XML)
        if: always()
        uses: actions/upload-artifact@v4.6.0
        with:
          name: postman-test-results
          path: results.xml

      - name: Upload HTML Report (Nice UI)
        if: always()
        uses: actions/upload-artifact@v4.6.0
        with:
          name: postman-html-report
          path: newman-report.html

      - name: Notify Slack on Success
        if: success() && steps.newman.outputs.exit_code == 0
        run: |
          PAYLOAD=$(jq -n \
            --arg channel "indexer-api-testing" \
            --arg username "github-actions" \
            --arg icon_emoji ":white_check_mark:" \
            --arg color "good" \
            --arg title "Newman Test Run Succeeded (Testnet)" \
            --arg text "All tests passed successfully after NordLayer VPN connection! Workflow: ${{ github.workflow }}, Run: ${{ github.run_id }}" \
            '{channel: $channel, username: $username, icon_emoji: $icon_emoji, attachments: [{color: $color, title: $title, text: $text}]}')
          curl -X POST -H "Content-Type: application/json" --data "$PAYLOAD" "${{ secrets.SLACK_WEBHOOK_URL }}"

      - name: Notify Slack on Test Failure
        if: success() && steps.newman.outputs.exit_code != 0
        run: |
          PAYLOAD=$(jq -n \
            --arg channel "indexer-api-testing" \
            --arg username "github-actions" \
            --arg icon_emoji ":warning:" \
            --arg color "warning" \
            --arg title "Newman Test Run Has Failures (Testnet)" \
            --arg text "Newman tests completed but encountered failures. Check reports. Workflow: ${{ github.workflow }}, Run: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}" \
            '{channel: $channel, username: $username, icon_emoji: $icon_emoji, attachments: [{color: $color, title: $title, text: $text}]}')
          curl -X POST -H "Content-Type: application/json" --data "$PAYLOAD" "${{ secrets.SLACK_WEBHOOK_URL }}"
          exit 1

      - name: Notify Slack on Workflow Step Failure
        if: failure()
        run: |
          COLOR="danger"
          TITLE="GitHub Actions Workflow Failed (Testnet Newman Tests)"
          TEXT="One or more critical steps failed. Check Actions run: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          PAYLOAD=$(jq -n \
            --arg channel "indexer-api-testing" \
            --arg username "github-actions" \
            --arg icon_emoji ":x:" \
            --arg color "$COLOR" \
            --arg title "$TITLE" \
            --arg text "$TEXT" \
            '{channel: $channel, username: $username, icon_emoji: $icon_emoji, attachments: [{color: $color, title: $title, text: $text}]}')
          curl -X POST -H "Content-Type: application/json" --data "$PAYLOAD" "${{ secrets.SLACK_WEBHOOK_URL }}"
