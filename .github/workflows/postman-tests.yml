name: Run Newman Tests with NordLayer VPN (Testnet)

on:
  repository_dispatch:
    types: [run-tests]

jobs:
  run-tests:
    runs-on: ubuntu-22.04
    permissions:
      contents: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4.2.2
        with:
          persist-credentials: true

      - name: Update Last Processed Upstream Run ID
        run: |
          echo "${{ github.event.client_payload.run_id }}" > .last_upstream_run_id.txt
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git pull --rebase
          git add .last_upstream_run_id.txt
          git commit -m "[skip ci] Update last processed upstream run id to ${{ github.event.client_payload.run_id }}" || echo "No changes to commit."
          git push

      - name: Install Dependencies (Newman, NordLayer, Datadog CLI)
        id: install_deps # Give this step an ID for outputs
        run: |
          # Assume npm install, repo setup, apt install nordlayer are fine from previous logs
          npm install -g newman newman-reporter-htmlextra @datadog/datadog-ci
          echo "System Info:"
          lsb_release -a
          uname -m
          echo "Setting up NordLayer repository using local ./nordlayer/nordlayer-latest_1.0.0_all.deb..."
          if [ -f "./nordlayer/nordlayer-latest_1.0.0_all.deb" ]; then
            sudo dpkg -i ./nordlayer/nordlayer-latest_1.0.0_all.deb
          else
            echo "ERROR: Local repository setup file ./nordlayer/nordlayer-latest_1.0.0_all.deb not found!"
            exit 1
          fi
          sudo apt-get update -y
          sudo apt-get install -f -y
          echo "Installing NordLayer package..."
          sudo apt-get install -y nordlayer 

          echo "Reloading systemd daemon..."
          sudo systemctl daemon-reload
          echo "Attempting to stop NordLayer service (if running)..."
          sudo systemctl stop nordlayer.service || true

          echo "Attempting to enable and start NordLayer service..."
          # Try 'restart' as per your original working code, it might behave differently than 'enable --now' if service is flaky
          if ! sudo systemctl restart nordlayer.service; then
            echo "ERROR: 'systemctl restart nordlayer.service' command failed."
            sudo systemctl status nordlayer.service --no-pager
            sudo journalctl -xeu nordlayer.service --no-pager -n 100
            # Try to find more specific NordLayer daemon logs
            echo "--- Checking for /var/log/nordlayer/ ---"
            sudo ls -la /var/log/nordlayer/ || echo "/var/log/nordlayer/ not found or no permission."
            sudo find /var/log/ -name "*nordlayer*" -ls 2>/dev/null || echo "No specific nordlayer logs found in /var/log."
            exit 1
          fi
          echo "Command 'systemctl restart nordlayer.service' completed."

          # More robust check for service stability
          echo "Checking NordLayer service stability (max 60s)..."
          STABLE_THRESHOLD=15 # Require service to be active for at least 15 seconds
          END_TIME=$((SECONDS + 60))
          SERVICE_STABLE=false
          while [ $SECONDS -lt $END_TIME ]; do
            if systemctl is-active --quiet nordlayer.service; then
              echo "NordLayer service active, checking uptime..."
              # Get service active state enter timestamp
              ACTIVE_ENTER_TIMESTAMP_USEC=$(systemctl show nordlayer.service --property=ActiveEnterTimestampMonotonic --value)
              if [ -n "$ACTIVE_ENTER_TIMESTAMP_USEC" ] && [ "$ACTIVE_ENTER_TIMESTAMP_USEC" -ne 0 ]; then
                CURRENT_TIME_USEC=$(systemd-clock) # systemd-clock gives monotonic time in usec
                SERVICE_UPTIME_SEC=$(((CURRENT_TIME_USEC - ACTIVE_ENTER_TIMESTAMP_USEC) / 1000000))
                echo "Service current uptime: $SERVICE_UPTIME_SEC seconds."
                if [ "$SERVICE_UPTIME_SEC" -ge "$STABLE_THRESHOLD" ]; then
                  echo "NordLayer service has been stable for $SERVICE_UPTIME_SEC seconds."
                  SERVICE_STABLE=true
                  break
                fi
              else 
                echo "Could not get ActiveEnterTimestampMonotonic, or it's zero."
              fi
            else
              echo "NordLayer service not active. Waiting..."
            fi
            sleep 5
          done

          if [ "$SERVICE_STABLE" = false ]; then
            echo "ERROR: NordLayer service did not become stable."
            sudo systemctl status nordlayer.service --no-pager
            sudo journalctl -xeu nordlayer.service --no-pager -n 200 # More lines for flapping
            # Try to find more specific NordLayer daemon logs
            echo "--- Checking for /var/log/nordlayer/ ---"
            sudo ls -la /var/log/nordlayer/ || echo "/var/log/nordlayer/ not found or no permission."
            sudo find /var/log/ -name "*nordlayer*" -ls 2>/dev/null || echo "No specific nordlayer logs found in /var/log."
            exit 1
          fi
          echo "NordLayer service IS STABLE and ACTIVE."
          
          SOCKET_PATH="/run/nordlayer/nordlayer.sock"
          echo "Checking for socket $SOCKET_PATH..."
          sleep 1 # Brief moment after stability check

          # Use sudo for the -S test as well for accuracy
          if sudo test -S "$SOCKET_PATH"; then
            echo "SUCCESS: Socket $SOCKET_PATH found and is a socket."
            echo "Setting permissions on existing socket $SOCKET_PATH to 666 (rw-rw-rw-)..."
            sudo chmod 666 "$SOCKET_PATH"
            echo "Permissions on socket after chmod 666:"
            sudo ls -l "$SOCKET_PATH"
            echo "::set-output name=socket_ready::true" # For subsequent steps
          else
            echo "CRITICAL ERROR: Socket $SOCKET_PATH does NOT exist or is not a socket, even though service is STABLE."
            sudo ls -la /run/nordlayer/ 
            sudo systemctl status nordlayer.service --no-pager
            sudo journalctl -xeu nordlayer.service --no-pager -n 100
            echo "::set-output name=socket_ready::false"
            exit 1
          fi
          
          echo "End of Install Dependencies step. Pausing for 2s before login attempt..."
          sleep 2

      - name: Login to NordLayer VPN
        # Only run if socket was ready from previous step
        # if: steps.install_deps.outputs.socket_ready == 'true' 
        # The above 'if' is problematic because install_deps exits on failure.
        # So if we reach here, socket should be ready.
        run: |
          SOCKET_PATH="/run/nordlayer/nordlayer.sock"
          echo "Login Step: Current user: $(whoami), Groups: $(groups)"
          echo "Login Step: Verifying socket $SOCKET_PATH existence..."
          
          if ! sudo test -S "$SOCKET_PATH"; then
            echo "CRITICAL ERROR (Login Step): Socket $SOCKET_PATH is MISSING or not a socket!"
            sudo ls -la /run/nordlayer/
            sudo systemctl status nordlayer.service --no-pager
            sudo journalctl -xeu nordlayer.service --no-pager -n 100
            exit 1
          else
            echo "Login Step: Socket $SOCKET_PATH FOUND. Permissions:"
            sudo ls -l "$SOCKET_PATH"
          fi

          if ! nordlayer login --email "${{ secrets.NORDLAYER_EMAIL }}" --password "${{ secrets.NORDLAYER_PASSWORD }}" --organization "dydxopsdao"; then
            echo "ERROR: nordlayer login command failed."
            sudo journalctl -xeu nordlayer.service --no-pager -n 100 
            # Try to find more specific NordLayer daemon logs
            echo "--- Checking for /var/log/nordlayer/ AT LOGIN FAILURE ---"
            sudo ls -la /var/log/nordlayer/ || echo "/var/log/nordlayer/ not found or no permission."
            sudo find /var/log/ -name "*nordlayer*" -ls 2>/dev/null || echo "No specific nordlayer logs found in /var/log."
            exit 1
          fi
          echo "NordLayer login successful."

      # ... (Rest of the workflow) ...
      - name: Connect to NordLayer VPN
        run: |
          nordlayer gateways
          nordlayer connect "dos-server-BQG2cKQV"
          sleep 20 
          echo "Verifying VPN IP..."
          curl --max-time 10 ifconfig.me || echo "Warning: Could not verify external IP."

      - name: Run Newman Tests for Testnet
        id: newman
        run: |
          newman run postman/collection.json \
            -e postman/environment.testnet.json \
            --reporters cli,htmlextra,junit \
            --reporter-htmlextra-export newman-report.html \
            --reporter-junit-export results.xml
          NEWMAN_EXIT_CODE=$?
          echo "exit_code=${NEWMAN_EXIT_CODE}" >> $GITHUB_OUTPUT
        continue-on-error: true

      - name: Disconnect from NordLayer VPN
        if: always()
        run: |
          nordlayer status || true
          nordlayer disconnect || echo "Already disconnected or failed to disconnect."

      - name: Upload Test Results (JUnit XML)
        if: always()
        uses: actions/upload-artifact@v4.6.0
        with:
          name: postman-test-results
          path: results.xml
          if-no-files-found: warn

      - name: Upload HTML Report (Nice UI)
        if: always()
        uses: actions/upload-artifact@v4.6.0
        with:
          name: postman-html-report
          path: newman-report.html
          if-no-files-found: warn

      - name: Notify Slack Channel and Handle Failure
        if: always()
        run: |
          NEWMAN_EXIT_CODE="${{ steps.newman.outputs.exit_code }}" 
          JOB_STATUS="${{ job.status }}"
          FINAL_MESSAGE=""
          ICON=":test_tube:" 
          COLOR="warning" 
          TITLE_TEXT="NordLayer & Newman Test Run (Testnet on ubuntu-22.04)"

          if [ "$JOB_STATUS" == "success" ]; then
            if [ -z "$NEWMAN_EXIT_CODE" ] || [ "$NEWMAN_EXIT_CODE" -eq 0 ]; then
              FINAL_MESSAGE="All tests passed successfully!"
              ICON=":white_check_mark:"
              COLOR="good"
            else
              FINAL_MESSAGE="Newman tests completed but encountered failures (Exit Code: $NEWMAN_EXIT_CODE)."
              ICON=":warning:"
              COLOR="danger" 
            fi
          else 
            FINAL_MESSAGE="Workflow step failed prior to or during Newman tests. Check Actions run."
            ICON=":x:"
            COLOR="danger"
          fi
          
          TEXT_MESSAGE="$FINAL_MESSAGE Workflow: <${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|${{ github.workflow }} Run #${{ github.run_number }}>"
          PAYLOAD=$(jq -n \
            --arg channel "indexer-api-testing" \
            --arg username "GitHub Actions" \
            --arg icon_emoji "$ICON" \
            --arg color "$COLOR" \
            --arg title "$TITLE_TEXT" \
            --arg text "$TEXT_MESSAGE" \
            '{channel: $channel, username: $username, icon_emoji: $icon_emoji, attachments: [{color: $color, title: $title, text: $text}]}')
          
          echo "$PAYLOAD"
          curl -X POST -H "Content-type: application/json" --data "$PAYLOAD" "${{ secrets.SLACK_WEBHOOK_URL }}"

          if [ "$JOB_STATUS" == "failure" ]; then
            exit 1
          elif [ -n "$NEWMAN_EXIT_CODE" ] && [ "$NEWMAN_EXIT_CODE" -ne 0 ]; then
            exit 1
          fi
